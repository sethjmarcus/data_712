print(nrow(cleaned_data))
# remove all zipcodes >= 11697, the largest zipcode
cleaned_data = filter(cleaned_data, zipcode <= 11697)
print(nrow(cleaned_data))
# remove all zipcodes that are not 5 digits
cleaned_data = filter(cleaned_data, nchar(zipcode)==5)
print(nrow(cleaned_data))
# Only get 'valid' complaint types
cleaned_data = cleaned_data[cleaned_data$complaint_type_311 %in% c('Asbestos', 'Cooling Tower','Indoor Air Quality', 'Indoor Sewage', 'Mold'), ]
# na really means 0 (for if there are no complaints, there are 0 complaints)
cleaned_data[is.na(cleaned_data)] <- 0
# remove rows where the the zipcode is na
cleaned_data = filter(df, !is.na(df$zipcode))
print(nrow(cleaned_data))
# remove rows where the the complaint type is na
cleaned_data = filter(cleaned_data, !is.na(cleaned_data$complaint_type_311))
print(nrow(cleaned_data))
# Remove nas and year 2023 because that is the current year
cleaned_data = filter(cleaned_data, format(cleaned_data$date_received, "%Y")!=2023)
print(nrow(cleaned_data))
# edit zipcodes that are +4 to standard
cleaned_data = cleaned_data %>% mutate(zipcode = substr(zipcode, start=1, stop=5))
print(nrow(cleaned_data))
# remove all zipcodes >= 11697, the largest zipcode
cleaned_data = filter(cleaned_data, zipcode <= 11697)
print(nrow(cleaned_data))
# remove all zipcodes that are not 5 digits
cleaned_data = filter(cleaned_data, nchar(zipcode)==5)
print(nrow(cleaned_data))
# Only get 'valid' complaint types
cleaned_data = cleaned_data[cleaned_data$complaint_type_311 %in% c('Asbestos', 'Cooling Tower','Indoor Air Quality', 'Indoor Sewage', 'Mold'), ]
print(nrow(cleaned_data))
# na really means 0 (for if there are no complaints, there are 0 complaints)
cleaned_data[is.na(cleaned_data)] <- 0
cleaned_data %>% group_by(complaint_type_311) %>%
summarise(count=n())
# get the data into a prettier form
pretty_table = cleaned_data %>%
group_by(zipcode, complaint_type_311) %>%
summarize(cnt=n()) %>%
pivot_wider(names_from = complaint_type_311, values_from=cnt)
# generate tables
for(i in names(pretty_table)){
pretty_table %>% select(zipcode, i) %>% arrange(desc(pretty_table[[i]])) %>% head() %>% print()
pretty_table %>% select(zipcode, i) %>% arrange(pretty_table[[i]]) %>% head() %>% print()
}
test = chisq.test(cleaned_data$complaint_type_311, cleaned_data$zipcode)
test
view(pretty_table)
# get the data into a prettier form
pretty_table = cleaned_data %>%
group_by(zipcode, complaint_type_311) %>%
summarize(cnt=n()) %>%
pivot_wider(names_from = complaint_type_311, values_from=cnt)
view(pretty_table)
# remove rows where the the zipcode is na
cleaned_data = filter(df, !is.na(df$zipcode))
print(nrow(cleaned_data))
# remove rows where the the complaint type is na
cleaned_data = filter(cleaned_data, !is.na(cleaned_data$complaint_type_311))
print(nrow(cleaned_data))
# Remove nas and year 2023 because that is the current year
cleaned_data = filter(cleaned_data, format(cleaned_data$date_received, "%Y")!=2023)
print(nrow(cleaned_data))
# edit zipcodes that are +4 to standard
cleaned_data = cleaned_data %>% mutate(zipcode = substr(zipcode, start=1, stop=5))
print(nrow(cleaned_data))
# remove all zipcodes >= 11697, the largest zipcode
cleaned_data = filter(cleaned_data, zipcode <= 11697)
print(nrow(cleaned_data))
# remove all zipcodes that are not 5 digits
cleaned_data = filter(cleaned_data, nchar(zipcode)==5)
print(nrow(cleaned_data))
# Only get 'valid' complaint types
cleaned_data = cleaned_data[cleaned_data$complaint_type_311 %in% c('Asbestos', 'Cooling Tower','Indoor Air Quality', 'Indoor Sewage', 'Mold'), ]
print(nrow(cleaned_data))
# na really means 0 (for if there are no complaints, there are 0 complaints)
replace(is.na(cleaned_data), 0)
# remove rows where the the zipcode is na
cleaned_data = filter(df, !is.na(df$zipcode))
print(nrow(cleaned_data))
# remove rows where the the complaint type is na
cleaned_data = filter(cleaned_data, !is.na(cleaned_data$complaint_type_311))
print(nrow(cleaned_data))
# Remove nas and year 2023 because that is the current year
cleaned_data = filter(cleaned_data, format(cleaned_data$date_received, "%Y")!=2023)
print(nrow(cleaned_data))
# edit zipcodes that are +4 to standard
cleaned_data = cleaned_data %>% mutate(zipcode = substr(zipcode, start=1, stop=5))
print(nrow(cleaned_data))
# remove all zipcodes >= 11697, the largest zipcode
cleaned_data = filter(cleaned_data, zipcode <= 11697)
print(nrow(cleaned_data))
# remove all zipcodes that are not 5 digits
cleaned_data = filter(cleaned_data, nchar(zipcode)==5)
print(nrow(cleaned_data))
# Only get 'valid' complaint types
cleaned_data = cleaned_data[cleaned_data$complaint_type_311 %in% c('Asbestos', 'Cooling Tower','Indoor Air Quality', 'Indoor Sewage', 'Mold'), ]
print(nrow(cleaned_data))
# na really means 0 (for if there are no complaints, there are 0 complaints)
cleaned_data = mutate_all(cleaned_data, ~replace_na(.,0))
#cleaned_data[is.na(cleaned_data)] <- 0
# get the data into a prettier form
pretty_table = cleaned_data %>%
group_by(zipcode, complaint_type_311) %>%
summarize(cnt=n()) %>%
pivot_wider(names_from = complaint_type_311, values_from=cnt)
view(pretty_table)
view(pretty_table)
summary(pretty_table)
summary(cleaned_data)
view(cleaned_data)
# get the data into a prettier form
pretty_table = cleaned_data %>%
group_by(zipcode, complaint_type_311) %>%
summarize(cnt=n()) %>%
pivot_wider(names_from = complaint_type_311, values_from=cnt)
pretty_table = mutate_all(pretty_table, ~replace_na(.,0))
# generate tables
for(i in names(pretty_table)){
pretty_table %>% select(zipcode, i) %>% arrange(desc(pretty_table[[i]])) %>% head() %>% print()
pretty_table %>% select(zipcode, i) %>% arrange(pretty_table[[i]]) %>% head() %>% print()
}
view(cleaned_data)
view(pretty_table)
pretty_table %>% group_by(`Cooling Tower`) %>% summarise(cnt=n())
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
gc()
directory = "/home/seth/Documents/Masters/Data712/assignment_1/"
setwd(directory)
set.seed(100)
knitr::opts_chunk$set(echo = TRUE)
# needed libraries
library("RSocrata")
library("dplyr")
library("tidyr")
# read in file
df = read.socrata("https://data.cityofnewyork.us/resource/9jgj-bmct.json?$select=complaint_number,incident_address_3 as zipcode,complaint_type_311,date_received")
# remove rows where the the zipcode is na
cleaned_data = filter(df, !is.na(df$zipcode))
print(nrow(cleaned_data))
# remove rows where the the complaint type is na
cleaned_data = filter(cleaned_data, !is.na(cleaned_data$complaint_type_311))
print(nrow(cleaned_data))
# Remove nas and year 2023 because that is the current year
cleaned_data = filter(cleaned_data, format(cleaned_data$date_received, "%Y")!=2023)
print(nrow(cleaned_data))
# edit zipcodes that are +4 to standard
cleaned_data = cleaned_data %>% mutate(zipcode = substr(zipcode, start=1, stop=5))
print(nrow(cleaned_data))
# remove all zipcodes >= 11697, the largest zipcode
cleaned_data = filter(cleaned_data, zipcode <= 11697)
print(nrow(cleaned_data))
# remove all zipcodes that are not 5 digits
cleaned_data = filter(cleaned_data, nchar(zipcode)==5)
print(nrow(cleaned_data))
# Only get 'valid' complaint types
cleaned_data = cleaned_data[cleaned_data$complaint_type_311 %in% c('Asbestos', 'Cooling Tower','Indoor Air Quality', 'Indoor Sewage', 'Mold'), ]
print(nrow(cleaned_data))
# na really means 0 (for if there are no complaints, there are 0 complaints)
cleaned_data = dplyr::mutate_all(cleaned_data, ~replace_na(.,0))
# get the data into a prettier form
pretty_table = cleaned_data %>%
group_by(zipcode, complaint_type_311) %>%
summarize(cnt=n()) %>%
pivot_wider(names_from = complaint_type_311, values_from=cnt)
pretty_table = mutate_all(pretty_table, ~replace_na(.,0))
# generate tables
for(i in names(pretty_table)){
pretty_table %>% select(zipcode, i) %>% arrange(desc(pretty_table[[i]])) %>% head() %>% print()
#pretty_table %>% select(zipcode, i) %>% arrange(pretty_table[[i]]) %>% head() %>% print()
}
# generate tables
for(i in names(pretty_table)){
pretty_table %>% select(zipcode, i) %>% arrange(desc(pretty_table[[i]])) %>% head() %>% print()
#pretty_table %>% select(zipcode, i) %>% arrange(pretty_table[[i]]) %>% head() %>% print()
}
#pretty_table %>% group_by(`Cooling Tower`) %>% summarise(cnt=n())
test = chisq.test(cleaned_data$complaint_type_311, cleaned_data$zipcode)
test
pretty_table %>% group_by(`Cooling Tower`) %>% summarise(cnt=n())
# Remove nas and year 2023 because that is the current year
cleaned_data = filter(cleaned_data, format(cleaned_data$date_received, "%Y")!=2023)
print(nrow(cleaned_data))
# remove rows where the the zipcode is na
cleaned_data = filter(df, !is.na(df$zipcode))
print(nrow(cleaned_data))
# remove rows where the the complaint type is na
cleaned_data = filter(cleaned_data, !is.na(cleaned_data$complaint_type_311))
print(nrow(cleaned_data))
# edit zipcodes that are +4 to standard
cleaned_data = cleaned_data %>% mutate(zipcode = substr(zipcode, start=1, stop=5))
print(nrow(cleaned_data))
# remove all zipcodes >= 11697, the largest zipcode
cleaned_data = filter(cleaned_data, zipcode <= 11697)
print(nrow(cleaned_data))
# remove all zipcodes that are not 5 digits
cleaned_data = filter(cleaned_data, nchar(zipcode)==5)
print(nrow(cleaned_data))
# Only get 'valid' complaint types
cleaned_data = cleaned_data[cleaned_data$complaint_type_311 %in% c('Asbestos', 'Cooling Tower','Indoor Air Quality', 'Indoor Sewage', 'Mold'), ]
print(nrow(cleaned_data))
# na really means 0 (for if there are no complaints, there are 0 complaints)
cleaned_data = dplyr::mutate_all(cleaned_data, ~replace_na(.,0))
print(nrows(df))
print(nrow(df))
# Remove nas and year 2023 because that is the current year
cleaned_data = filter(cleaned_data, format(cleaned_data$date_received, "%Y")!=2023)
print(nrow(cleaned_data))
# remove rows where the the zipcode is na
cleaned_data = filter(df, !is.na(df$zipcode))
print(nrow(cleaned_data))
# remove rows where the the complaint type is na
cleaned_data = filter(cleaned_data, !is.na(cleaned_data$complaint_type_311))
print(nrow(cleaned_data))
# edit zipcodes that are +4 to standard
cleaned_data = cleaned_data %>% mutate(zipcode = substr(zipcode, start=1, stop=5))
print(nrow(cleaned_data))
# remove all zipcodes >= 11697, the largest zipcode
cleaned_data = filter(cleaned_data, zipcode <= 11697)
print(nrow(cleaned_data))
# remove all zipcodes that are not 5 digits
cleaned_data = filter(cleaned_data, nchar(zipcode)==5)
print(nrow(cleaned_data))
# Only get 'valid' complaint types
cleaned_data = cleaned_data[cleaned_data$complaint_type_311 %in% c('Asbestos', 'Cooling Tower','Indoor Air Quality', 'Indoor Sewage', 'Mold'), ]
print(nrow(cleaned_data))
# na really means 0 (for if there are no complaints, there are 0 complaints)
cleaned_data = dplyr::mutate_all(cleaned_data, ~replace_na(.,0))
print(nrow(df))
# Remove nas and year 2023 because that is the current year
cleaned_data = filter(cleaned_data, format(cleaned_data$date_received, "%Y")!=2023)
print(nrow(cleaned_data))
# remove rows where the the zipcode is na
cleaned_data = filter(df, !is.na(df$zipcode))
print(nrow(cleaned_data))
# remove rows where the the complaint type is na
cleaned_data = filter(cleaned_data, !is.na(cleaned_data$complaint_type_311))
print(nrow(cleaned_data))
# edit zipcodes that are +4 to standard
cleaned_data = cleaned_data %>% mutate(zipcode = substr(zipcode, start=1, stop=5))
print(nrow(cleaned_data))
# remove all zipcodes >= 11697, the largest zipcode
cleaned_data = filter(cleaned_data, zipcode <= 11697)
print(nrow(cleaned_data))
# remove all zipcodes that are not 5 digits
cleaned_data = filter(cleaned_data, nchar(zipcode)==5)
print(nrow(cleaned_data))
# Only get 'valid' complaint types
cleaned_data = cleaned_data[cleaned_data$complaint_type_311 %in% c('Asbestos', 'Cooling Tower','Indoor Air Quality', 'Indoor Sewage', 'Mold'), ]
print(nrow(cleaned_data))
# na really means 0 (for if there are no complaints, there are 0 complaints)
cleaned_data = dplyr::mutate_all(cleaned_data, ~replace_na(.,0))
# read in file
df = read.socrata("https://data.cityofnewyork.us/resource/9jgj-bmct.json?$select=complaint_number,incident_address_3 as zipcode,complaint_type_311,date_received")
print(nrow(df))
# Remove nas and year 2023 because that is the current year
cleaned_data = filter(cleaned_data, format(cleaned_data$date_received, "%Y")!=2023)
print(nrow(cleaned_data))
# remove rows where the the zipcode is na
cleaned_data = filter(df, !is.na(df$zipcode))
print(nrow(cleaned_data))
# remove rows where the the complaint type is na
cleaned_data = filter(cleaned_data, !is.na(cleaned_data$complaint_type_311))
print(nrow(cleaned_data))
# edit zipcodes that are +4 to standard
cleaned_data = cleaned_data %>% mutate(zipcode = substr(zipcode, start=1, stop=5))
print(nrow(cleaned_data))
# remove all zipcodes >= 11697, the largest zipcode
cleaned_data = filter(cleaned_data, zipcode <= 11697)
print(nrow(cleaned_data))
# remove all zipcodes that are not 5 digits
cleaned_data = filter(cleaned_data, nchar(zipcode)==5)
print(nrow(cleaned_data))
# Only get 'valid' complaint types
cleaned_data = cleaned_data[cleaned_data$complaint_type_311 %in% c('Asbestos', 'Cooling Tower','Indoor Air Quality', 'Indoor Sewage', 'Mold'), ]
print(nrow(cleaned_data))
# na really means 0 (for if there are no complaints, there are 0 complaints)
cleaned_data = dplyr::mutate_all(cleaned_data, ~replace_na(.,0))
print(nrow(df))
# Remove nas and year 2023 because that is the current year. Iff doing year by year
#cleaned_data = filter(cleaned_data, format(cleaned_data$date_received, "%Y")!=2023)
#print(nrow(cleaned_data))
# remove rows where the the zipcode is na
cleaned_data = filter(df, !is.na(df$zipcode))
print(nrow(cleaned_data))
# remove rows where the the complaint type is na
cleaned_data = filter(cleaned_data, !is.na(cleaned_data$complaint_type_311))
print(nrow(cleaned_data))
# edit zipcodes that are +4 to standard
cleaned_data = cleaned_data %>% mutate(zipcode = substr(zipcode, start=1, stop=5))
print(nrow(cleaned_data))
# remove all zipcodes >= 11697, the largest zipcode
cleaned_data = filter(cleaned_data, zipcode <= 11697)
print(nrow(cleaned_data))
# remove all zipcodes that are not 5 digits
cleaned_data = filter(cleaned_data, nchar(zipcode)==5)
print(nrow(cleaned_data))
# Only get 'valid' complaint types
cleaned_data = cleaned_data[cleaned_data$complaint_type_311 %in% c('Asbestos', 'Cooling Tower','Indoor Air Quality', 'Indoor Sewage', 'Mold'), ]
print(nrow(cleaned_data))
# na really means 0 (for if there are no complaints, there are 0 complaints)
cleaned_data = dplyr::mutate_all(cleaned_data, ~replace_na(.,0))
gc()
rm(ls())
rm(list = ls())
gc()
quit()
.Machine$double.eps
?.Machine
library("readxl")
ls
ls()
?read.csv
rm(list=ls())
gc()
directory = "/home/seth/Documents/Masters/Data712/assignment_2/"
setwd(directory)
rm(list=ls())
gc()
directory = "/home/seth/Documents/Masters/Data712/assignment_2/"
setwd(directory)
rm(list=ls())
gc()
directory = "/home/seth/Documents/Masters/Data712/assignment_2/"
setwd(directory)
rm(list=ls())
gc()
directory = "/home/seth/Documents/Masters/data712/assignment_2/"
setwd(directory)
set.seed(100)
# needed libraries
library("RSocrata")
library("dplyr")
library("tidyr")
# read in files
restaurant_raw = read.socrata("https://data.cityofnewyork.us/resource/43nn-pn8j.json")
rodent_raw = read.socrata("https://data.cityofnewyork.us/resource/p937-wjvj.json")
# read in files
restaurant_raw = read.socrata("https://data.cityofnewyork.us/resource/43nn-pn8j.json")
rodent_raw = read.socrata("https://data.cityofnewyork.us/resource/p937-wjvj.json")
rm(list=ls())
gc()
directory = "/home/seth/Documents/Masters/data712/assignment_2/"
setwd(directory)
set.seed(100)
# needed libraries
library("RSocrata")
library("dplyr")
library("tidyr")
# read in files
restaurant_raw = read.socrata("https://data.cityofnewyork.us/resource/43nn-pn8j.json")
restaurant_raw = read.socrata("https://data.cityofnewyork.us/resource/43nn-pn8j.json")
library("jsonlite")
temp = get("https://data.cityofnewyork.us/resource/43nn-pn8j.json")
temp = get(paste0("https://data.cityofnewyork.us/resource/43nn-pn8j.json"))
base = "https://data.cityofnewyork.us/resource/43nn-pn8j.json"
API URL = paste0(base)
library(httr)
API URL = paste0(base)
API_URL <- paste0(base)
raw_data = get(API_URL)
base = "https://data.cityofnewyork.us/resource/43nn-pn8j.json"
raw_data = get(API_URL)
API_URL <- paste0(base)
raw_data = get(API_URL)
raw_data = function(){}
raw_data = function(){
url ="" https://data.cityofnewyork.us/resource/43nn-pn8j.json"
raw_data = function(){
url = modify_url("https://data.cityofnewyork.us/resource/43nn-pn8j.json")
GET(url)
}
rm(list=ls())
gc()
directory = "/home/seth/Documents/Masters/data712/assignment_2/"
setwd(directory)
set.seed(100)
# needed libraries
library("httr")
library("dplyr")
library("tidyr")
raw_data = function(){
url = modify_url("https://data.cityofnewyork.us/resource/43nn-pn8j.json")
GET(url)
}
#raw_data = function(){
#  url = modify_url("https://data.cityofnewyork.us/resource/43nn-pn8j.json")
#  GET(url)
#}
GET(modify_url("https://data.cityofnewyork.us/resource/43nn-pn8j.json"))
#raw_data = function(){
#  url = modify_url("https://data.cityofnewyork.us/resource/43nn-pn8j.json")
#  GET(url)
#}
df = GET(modify_url("https://data.cityofnewyork.us/resource/43nn-pn8j.json"))
#raw_data = function(){
#  url = modify_url("https://data.cityofnewyork.us/resource/43nn-pn8j.json")
#  GET(url)
#}
df = GET(modify_url("https://data.cityofnewyork.us/resource/43nn-pn8j.csv"))
#raw_data = function(){
#  url = modify_url("https://data.cityofnewyork.us/resource/43nn-pn8j.json")
#  GET(url)
#}
df = GET(modify_url("https://data.cityofnewyork.us/resource/43nn-pn8j.csv"))$content
#raw_data = function(){
#  url = modify_url("https://data.cityofnewyork.us/resource/43nn-pn8j.json")
#  GET(url)
#}
req = GET(modify_url("https://data.cityofnewyork.us/resource/43nn-pn8j.csv"))
cont = req$content
char = rawToChar(req$content)
df = jsonlite::fromJSON(char)
rm(list=ls())
gc()
directory = "/home/seth/Documents/Masters/data712/assignment_2/"
setwd(directory)
set.seed(100)
# needed libraries
library("httr")
library("dplyr")
library("tidyr")
library("purrr")
#raw_data = function(){
#  url = modify_url("https://data.cityofnewyork.us/resource/43nn-pn8j.json")
#  GET(url)
#}
req = GET(modify_url("https://data.cityofnewyork.us/resource/43nn-pn8j.csv"))
cont = req$content
char = rawToChar(req$content)
df = purrr::map(char, jsonlite::fromJSON)
#raw_data = function(){
#  url = modify_url("https://data.cityofnewyork.us/resource/43nn-pn8j.json")
#  GET(url)
#}
req = GET(modify_url("https://data.cityofnewyork.us/resource/43nn-pn8j.csv"))
cont = req$content
char = rawToChar(req$content)
df = jsonlite::stream_in(textConnection(gsub("\\n", "", char)))
# read in files
restaurant_raw = read.socrata("https://data.cityofnewyork.us/resource/43nn-pn8j.json")
rm(list=ls())
gc()
directory = "/home/seth/Documents/Masters/data712/assignment_2/"
setwd(directory)
set.seed(100)
# needed libraries
library("httr")
library("RSocrata")
library("dplyr")
library("tidyr")
library("purrr")
# read in files
restaurant_raw = read.socrata("https://data.cityofnewyork.us/resource/43nn-pn8j.json")
rodent_raw = read.socrata("https://data.cityofnewyork.us/resource/p937-wjvj.json")
restaurant_raw = read.socrata("https://data.cityofnewyork.us/resource/43nn-pn8j.json$select=camis,zipcode,inspection_date,action,violation_code,violation_description,critical_flag,score,grade")
restaurant_raw = read.socrata("https://data.cityofnewyork.us/resource/43nn-pn8j.json?$select=camis,zipcode,inspection_date,action,violation_code,violation_description,critical_flag,score,grade")
rodent_raw = read.socrata("https://data.cityofnewyork.us/resource/p937-wjvj.json?$select=inspection_type,job_ticket_or_work_order_id,zip_code as zipcode,inspection_date,result")
View(rodent_raw)
View(restaurant_raw)
income_raw_2019 = read.csv("/income_data_raw/ACSST5Y2019.S1901-Data.csv")
getwd()
rm(list=ls())
gc()
directory = "/home/seth/Documents/Masters/data712/assignment_2/"
setwd(directory)
set.seed(100)
# needed libraries
library("httr")
library("RSocrata")
library("dplyr")
library("tidyr")
library("purrr")
getwd()
setwd('/home/seth/Documents/Masters/data712')
getwd()
rm(list=ls())
gc()
directory = "/home/seth/Documents/Masters/data712/assignment_2/"
setwd(directory)
set.seed(100)
# needed libraries
library("httr")
library("RSocrata")
library("dplyr")
library("tidyr")
library("purrr")
getwd()
# read in files
restaurant_raw = read.socrata("https://data.cityofnewyork.us/resource/43nn-pn8j.json?$select=camis,zipcode,inspection_date,action,violation_code,violation_description,critical_flag,score,grade")
rodent_raw = read.socrata("https://data.cityofnewyork.us/resource/p937-wjvj.json?$select=inspection_type,job_ticket_or_work_order_id,zip_code as zipcode,inspection_date,result")
income_raw_2019 = read.csv("/income_data_raw/ACSST5Y2019.S1901-Data.csv")
ls()
income_raw_2019 = read.csv("/income_data_raw/ACSST5Y2019.S1901-Data.csv")
income_raw_2019 = read.csv("income_data_raw/ACSST5Y2019.S1901-Data.csv")
?read.csv
getwd()
income_raw_2019 = read.csv("income_data_raw/ACSST5Y2019.S1901-Data.csv")
income_raw_2021 = read.csv("ACSST5Y2021.S1901-Data.csv")
income_raw_2021 = read.csv("ACSST5Y2021S1901Data.csv")
income_raw_2021 = read.csv("2019_data.csv")
getwd()
directory = "/home/seth/Documents/Masters/data712/assignment_2/"
setwd(directory)
getwd()
income_raw_2021 = read.csv("ACSST5Y2021.S1901-Data.csv")
income_raw_2021 = read.csv("ACSST5Y2021S1901Data.csv")
income_raw_2020 = read.csv("ACSST5Y2020S1901Data.csv")
income_raw_2019 = read.csv("ACSST5Y2019S1901Data.csv")
head(income_raw_2019)
